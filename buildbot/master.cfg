# -*- python -*-
#
# BuildBot script for QuarkPlayer
#

quarkplayer_svn = "http://phonon-vlc-mplayer.googlecode.com/svn/trunk/"
quarkplayer_builddir = "build/build"

c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [
	BuildSlave("linux-i386", "password"),
	BuildSlave("linux-x86_64", "password"),
	BuildSlave("windows-i386", "password"),
	BuildSlave("windows-x86_64", "password")
]

c['slavePortnum'] = 9989


####### CHANGESOURCES

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = SVNPoller("http://phonon-vlc-mplayer.googlecode.com/svn/trunk/")


####### SCHEDULERS

from buildbot.scheduler import Scheduler, Nightly
build_source = Scheduler(
	name = "all",
	branch = None,
	treeStableTimer = 2*60,
	builderNames = [
		"linux_i386_trunk_debug",
		"linux_i386_trunk_release",
		"windows_i386_trunk_mingw_debug",
		"windows_i386_trunk_mingw_release"
	]
)

#build_nightly = Nightly(
#	name = "nightly",
#	hour = 3,
#	minute = 0,
#	builderNames = ["linux_i386_trunk_debug", "linux_i386_trunk_release"]
#)

#build_package = Dependent(
#	name = "build-package",
#	upstream = build_source,
#	builderNames = ["make-deb", "make-rpm", "make-nsis"]
#)
c['schedulers'] = [build_source]


####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Configure, Compile, ShellCommand

checkout = SVN(svnurl = quarkplayer_svn)
make_install = Compile(command = ["make", "install"], workdir = quarkplayer_builddir)
make_deb = ShellCommand(command = ["make", "deb"], description = "make deb", workdir = quarkplayer_builddir)
make_rpm = ShellCommand(command = ["make", "rpm"], description = "make rpm", workdir = quarkplayer_builddir)
make_nsis = ShellCommand(command = ["make", "nsis"], description = "nmake nsis", workdir = quarkplayer_builddir)
linux_upload_package = ShellCommand(command=["/bin/sh", "-c", "mv *.deb *.rpm /var/www/nightly/"], description = "upload packages", workdir = quarkplayer_builddir)
windows_upload_package = ShellCommand(command=["/bin/sh", "-c", "mv *.deb *.rpm /var/www/nightly/"], description = "upload NSIS setup", workdir = quarkplayer_builddir)

linux_i386_trunk_debug = factory.BuildFactory()
linux_i386_trunk_debug.addStep(checkout)
linux_i386_trunk_debug.addStep(Configure(command = "./build_make-debug.sh", workdir = quarkplayer_builddir))
linux_i386_trunk_debug.addStep(make_install)
linux_i386_trunk_debug.addStep(make_deb)
linux_i386_trunk_debug.addStep(make_rpm)
linux_i386_trunk_debug.addStep(linux_upload_package)
builder_linux_i386_trunk_debug = {
	'name': "linux_i386_trunk_debug",
	'slavename': "linux-i386",
	'builddir': "linux_i386_trunk_debug",
	'factory': linux_i386_trunk_debug,
}

linux_i386_trunk_release = factory.BuildFactory()
linux_i386_trunk_release.addStep(checkout)
linux_i386_trunk_release.addStep(Configure(command="./build_make-release.sh", workdir = quarkplayer_builddir))
linux_i386_trunk_release.addStep(make_install)
linux_i386_trunk_release.addStep(make_deb)
linux_i386_trunk_release.addStep(make_rpm)
linux_i386_trunk_release.addStep(linux_upload_package)
builder_linux_i386_trunk_release = {
	'name': "linux_i386_trunk_release",
	'slavename': "linux-i386",
	'builddir': "linux_i386_trunk_release",
	'factory': linux_i386_trunk_release,
}

windows_i386_trunk_mingw_debug = factory.BuildFactory()
windows_i386_trunk_mingw_debug.addStep(checkout)
windows_i386_trunk_mingw_debug.addStep(Configure(command = "build_mingw-debug.bat", workdir = quarkplayer_builddir))
windows_i386_trunk_mingw_debug.addStep(make_install)
windows_i386_trunk_mingw_debug.addStep(make_nsis)
windows_i386_trunk_mingw_debug.addStep(windows_upload_package)
builder_windows_i386_trunk_mingw_debug = {
	'name': "windows_i386_trunk_mingw_debug",
	'slavename': "windows-i386",
	'builddir': "windows_i386_trunk_mingw_debug",
	'factory': windows_i386_trunk_mingw_debug,
}

windows_i386_trunk_mingw_release = factory.BuildFactory()
windows_i386_trunk_mingw_release.addStep(checkout)
windows_i386_trunk_mingw_release.addStep(Configure(command = "build_mingw-release.bat", workdir = quarkplayer_builddir))
windows_i386_trunk_mingw_release.addStep(make_install)
windows_i386_trunk_mingw_release.addStep(make_nsis)
windows_i386_trunk_mingw_release.addStep(windows_upload_package)
builder_windows_i386_trunk_mingw_release = {
	'name': "windows_i386_trunk_mingw_release",
	'slavename': "windows-i386",
	'builddir': "windows_i386_trunk_mingw_release",
	'factory': windows_i386_trunk_mingw_release,
}


c['builders'] = [
	builder_linux_i386_trunk_debug,
	builder_linux_i386_trunk_release,
	builder_windows_i386_trunk_mingw_debug,
	builder_windows_i386_trunk_mingw_release
]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port = 8010, allowForce = True))


####### PROJECT IDENTITY

c['projectName'] = "QuarkPlayer"
c['projectURL'] = "http://phonon-vlc-mplayer.googlecode.com/"
c['buildbotURL'] = "http://localhost:8010/"
