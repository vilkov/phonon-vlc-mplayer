#summary How to build and install QuarkPlayer
#labels Featured,Phase-Requirements,Phase-Deploy

=Introduction=

This document explains how to build and install !QuarkPlayer under Windows and GNU/Linux.

=Requirements=

 * OS: GNU/Linux, Windows
 * Tested under: Windows XP SP2, Ubuntu Hardy 8.04
 * Language: C++
 * License: GNU LGPL
 * Dependencies:
   * Qt >= 4.4.3
      * Website: http://trolltech.com/
      * Download link: ftp://ftp.trolltech.com/qt/source/
   * Phonon >= 4.2.80 (provided with !QuarkPlayer, no manual install needed)
      * Website: http://phonon.kde.org/
   * !TagLib >= 1.5.1 (provided with !QuarkPlayer, no manual install needed)
      * Website: http://developer.kde.org/~wheeler/taglib.html
   * !MediaInfo >= 0.7.8 (provided with !QuarkPlayer, no manual install needed)
      * Website: http://mediainfo.sourceforge.net/
   * CMake >= 2.6.2
      * Website: http://cmake.org/
      * Download link: http://cmake.org/HTML/Download.html
   * Compiler: GCC or MinGW or Visual C++

==GNU/Linux==

If Qt is not present on your distribution (libqt4-devel packages), you will have to compile Qt yourself. Recent GNU/Linux distributions already provide Qt.
Please refer to the links above for downloading and installing Qt "by hand".

==Visual C++==

Several versions are supported:
 * Visual C++ 2003 (MSVC71) released in April 2003
 * Visual C++ 2005 (MSVC80) released in November 2005
 * Visual C++ 2008 (MSVC90) released in November 2007

Visual C++ (within Visual Studio) comes in different editions:
 * Express - free for non commercial use
 * Standard
 * Professional
 * Team System - comes with performance collection tools

Why Visual C++ over MinGW? Visual C++ is better for day to day developing and produces better binaries. Visual C++ is the recommended compiler under Windows.

After installing Visual Studio, you will be able to compile Qt (see links above) and then !QuarkPlayer. When compiling Qt, I recommend to use {{{configure -no-qt3support -nomake examples -nomake demos}}}

(Old Qt Windows binaries can be found here: http://qt.windows.binaries.googlepages.com/index.html)

===Visual Studio Evaluation Copy===

You can download an evaluation copy (90 days) of Visual C++ 2008 Team Suite [http://msdn.microsoft.com/en-us/evalcenter/bb633757.aspx here] (3.82 GB) or an evaluation copy (180 days) of Visual Studio 2005 [http://download.microsoft.com/download/6/f/5/6f5f7a01-50bb-422d-8742-c099c8896969/En_vs_2005_vsts_180_Trial.img here] (3.33 GB).
After installing the evaluation copy, there is not much to do: the installer of the commercial/evaluation version sets up the environment and provides a 'Visual Studio Command Prompt'.

===Visual Studio Express Edition===

/!\ The whole installation process of Visual Studio Express Edition is long and uneasy, I recommend to use an evaluation copy of Visual Studio or MinGW.

Here some informations about Visual C++ 2005 Express Edition (taken from [http://techbase.kde.org/index.php?title=Getting_Started/Build/KDE4/Windows/MS_Visual_Studio KDE TechBase])

 * Install Visual C++ 2005 Express Edition: http://www.microsoft.com/express/2005/download/default.aspx
 * Install Platform/Windows SDK: [http://en.wikipedia.org/wiki/Microsoft_Windows_SDK#Obtaining_the_SDK link]
 * Install Service Pack 1 for Visual C++ 2005 Express Edition (probably not needed, please tell me if it works without): [http://www.microsoft.com/downloads/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e&DisplayLang=en link]
 * Install DirectX SDK if you want to compile the !DirectShow 9 backend: [http://msdn.microsoft.com/en-us/directx/default.aspx link]

You need to setup you compiling environment, I use this small script: [http://code.google.com/p/phonon-vlc-mplayer/source/browse/wiki setenv-*.bat].
Adapt this script to fit your own needs. You have to run it from a 'Command prompt' each time you want to compile something using Visual C++ 2005.

==MinGW==

You can use MinGW instead of Visual C++.

 * Install Qt compiled for MinGW: [http://ftp.ntua.gr/pub/X11/Qt/qt/source/qt-win-opensource-4.4.3-mingw.exe qt-win-opensource-4.4.3-mingw.exe]

This package already also comes with MinGW, thus you don't need to install it independently.

(For the little story, the default Windows backend for Phonon is based on !DirectShow 9 and MinGW is not capable of compiling it, that's why Trolltech doesn't ship the !DirectShow 9 backend with Qt for MinGW)

==MacOS X==

I didn't try !QuarkPlayer under MacOS X (I don't have an Apple computer).
However, MPlayer runs under MacOS X and 99% of !QuarkPlayer source code is multiplatform and depends only on Qt. Only need should be to modify CMakeLists.txt files.

==Compiling the latest Phonon library==

Qt generally comes with an old version of Phonon, that's one of the reason why !QuarkPlayer ships its own copy of Phonon SVN (contains several patches not included yet inside the official version).

==MPlayer Phonon backend==

 * Dependencies
   * Same as above +
   * MPlayer: >= MPlayer-1.0rc2
      * Website: http://www.mplayerhq.hu/
      * Developers infos: http://www.mplayerhq.hu/DOCS/tech/slave.txt
      * Download link: http://www.mplayerhq.hu/design7/dload.html

MPlayer Phonon backend runs the MPlayer (mplayer.exe under Windows) process in slave mode.

 * Under GNU/Linux, you should get a MPlayer package with your favorite GNU/Linux distribution.

 * Under Windows, install [http://smplayer.sourceforge.net/ SMPlayer] that comes with a Windows build of MPlayer. phonon-mplayer looks for {{{mplayer/mplayer.exe}}}

==VLC Phonon backend==

/!\ !QuarkPlayer does not come anymore with the VLC backend.
It is now developed independently, please see http://git.videolan.org/?p=vlc-lukas.git;a=tree;f=projects/phonon/vlc;hb=HEAD

 * Dependencies
   * Same as above +
   * VLC: git trunk
      * Website: http://www.videolan.org/
      * Developers infos: http://wiki.videolan.org/Developers_Corner
      * Download link: http://nightlies.videolan.org/

VLC Phonon backend uses libvlc (http://wiki.videolan.org/Libvlc) in order to control VLC.
It currently works under Windows and Linux by loading libvlc-control.(dll|so) at runtime.
You must install a VLC nightly build, there is no need to install vlc-devel packages.

=Get the source code=

Source code from Subversion repository is around 10 MB.

 * Linux
You need to install [http://subversion.tigris.org/ Subversion], and then enter this command line:
{{{svn co http://phonon-vlc-mplayer.googlecode.com/svn/trunk quarkplayer}}}

 * Windows
Under Windows, I recommend to install [http://tortoisesvn.tigris.org/ TortoiseSVN].
Then right click on an empty directory and select {{{SVN Checkout...}}} and enter {{{http://phonon-vlc-mplayer.googlecode.com/svn/trunk}}}

http://phonon-vlc-mplayer.googlegroups.com/web/phonon-vlc-mplayer-tortoisesvn.png?gda=2qH30VMAAADzGcJ2Wp_dML5pKvawJMYJk78pZsf9cl0k95O_fFnkOmG1qiJ7UbTIup-M2XPURDTf-EQHMgtRDQmqKfqDX3niD-A81HbH9qxuvAXiTpBThAKOZFcal87Qff7gkugrF_g&gsc=-sR1VgsAAABMDwMWexEhpE3I217pOobO

=How to build=

Warning: be sure that your Qt installation matches the way you compile !QuarkPlayer i.e if Qt is in debug mode, !QuarkPlayer should be compiled in debug mode too. You cannot mix !QuarkPlayer in release mode and Qt in debug mode (you will get an error message: "backend cannot be loaded" when running !QuarkPlayer).

Everything generated by the {{{make}}}/{{{nmake}}} command is inside the directory {{{build}}}.

==Under GNU/Linux==
{{{
cd trunk
cd build
./build_make-debug.sh
make
make install

#Create a Debian package
make deb

#Create a RPM package
make rpm

#Create a generic .tar.bz2 file containing the binaries
make package
}}}

Example of build structure:
{{{
build/linux-gcc43-debug
build/linux-gcc43-debug/quarkplayer
build/linux-gcc43-debug/quarkplayer.sh
build/quarkplayer-0.2.5-rev683-linux-gcc43-debug.deb
build/quarkplayer-0.2.5-rev683-linux-gcc43-debug.rpm
}}}

==Under Windows==
{{{
cd trunk
cd build
build_nmake-debug.bat
nmake
nmake install

#Create a NSIS setup
nmake nsis

#Create a generic .zip file containing the binaries
nmake package
}}}

Example of build structure:
{{{
build/win32-msvc80-debug
build/win32-msvc80-debug/quarkplayer.exe
build/quarkplayer-0.2.5-rev683-win32-msvc80-debug.setup
build/quarkplayer-0.2.5-rev686-win32-msvc80-debug.zip
}}}

For generating a Visual C++ 2005 project, there is {{{build/build_projectmsvc8-debug.bat}}}, however I recommend the process above.

=Run the Phonon backends=

Qt looks for a specific location where Phonon .(dll|so) backends are installed. Qt will load the first backend found (alphabetically) from this location.
Check Qt Plugins !HowTo: http://doc.trolltech.com/main-snapshot/plugins-howto.html

KDE allows you to configure the Phonon backend you want to use globally via {{{systemsettings}}}.
Qt comes with {{{qtconfig}}} under GNU/Linux that let's you configure the preferred Phonon backend.

Currently, Phonon backends have to be recompiled either for KDE or for Qt, that's why you will find some KDE4_FOUND defines inside !QuarkPlayer code (Backend.cpp and CMakeLists.txt)

Qt looks for Phonon backends inside {{{$QTDIR/plugins/phonon_backend}}} and {{{$APPDIR/phonon_backend}}}

=Use the MPlayer backend (phonon-mplayer) with your own Qt application=

Copy phonon-mplayer.(dll|so) inside {{{MYAPP/phonon_backend/}}}

It is not possible to specify the Phonon backend used at the application level (there no function like {{{Phonon::setPreferredBackend("the backend my app needs")}}})

Please tell me if you encounter some problems via: phonon-vlc-mplayer@googlegroups.com